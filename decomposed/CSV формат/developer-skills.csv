skill name:separator:skill description
Работать под руководством:separator:Выполнять задачи согласно инструкциям и под контролем наставника
Работать самостоятельно:separator:Самостоятельно планировать и выполнять задачи разработки
Изучать новые инструменты:separator:Быстро осваивать языки, фреймворки и сервисы, необходимые проекту
Использовать систему контроля версий:separator:Применять Git / SVN для фиксации, ветвления и слияния кода
Использовать интегрированную среду разработки:separator:Писать, запускать и отлаживать код в IDE (VS Code, IntelliJ IDEA и др.)
Следовать плану работ:separator:Соблюдать утверждённый график задач и сроки
Соблюдать стандарты кодирования:separator:Писать код по гайдлайнам команды или индустрии
Планировать работу:separator:Оценивать трудоёмкость, расставлять приоритеты, обновлять статус задач
Декомпозировать и описывать задачи:separator:Делить требования на выполнимые части и фиксировать acceptance‑критерии
Отлаживать программное обеспечение:separator:Выявлять дефекты, воспроизводить ошибки и вносить исправления
Проводить модульное тестирование:separator:Разрабатывать и запускать юнит‑тесты для функций и классов
Проводить интеграционное тестирование:separator:Проверять взаимодействие компонентов после их объединения
Проводить нагрузочное тестирование:separator:Оценивать устойчивость и производительность при высоких нагрузках
Проводить ревью кода:separator:Анализировать изменения коллег, давать обратную связь
Рефакторить код:separator:Улучшать читаемость и поддерживаемость без изменения поведения
Определять нефункциональные требования:separator:Специфицировать показатели надёжности, безопасности, масштабируемости
Настраивать тестовые окружения:separator:Разворачивать среды для unit‑, интеграционных и e2e‑тестов
Внедрять DevSecOps‑практики:separator:Автоматизировать сборку, тесты, сканирование на уязвимости и деплой
Сотрудничать с бизнес‑аналитиками:separator:Обмениваться информацией о требованиях и ограничениях решения
Разрабатывать стандарты программирования:separator:Определять правила стиля, ветвления и приёма кода
Управлять жизненным циклом релиза ПО:separator:Планировать версии, релиз‑candidate, hot‑fix и EOL
Разрабатывать технические отчёты:separator:Подготавливать структурированные отчёты о результатах разработки
Руководить командой разработки:separator:Задавать цели, распределять задачи, мотивировать команду
Наставлять разработчиков:separator:Поддерживать развитие через коучинг и ревью
Обеспечивать качество программного обеспечения:separator:Следить за стандартами кода, тестами и метриками качества
Управлять конфигурацией ПО:separator:Организовывать версии, сборки и зависимости
Проводить анализ рисков проекта:separator:Выявлять технические и плановые риски, разрабатывать планы их смягчения
Разрабатывать системную архитектуру:separator:Определять компоненты, интерфейсы и схемы взаимодействия
Применять архитектурные шаблоны:separator:Использовать паттерны для гибкости и масштабируемости
Выбирать технологический стек:separator:Оценивать и утверждать языки, фреймворки, БД, облака
Моделировать программное обеспечение:separator:Создавать UML/ArchiMate диаграммы для документирования
Обеспечивать совместимость систем:separator:Гарантировать корректную интеграцию с текущей инфраструктурой
Проводить архитектурные ревью:separator:Оценивать решения на соответствие целевой архитектуре
Документировать архитектурные решения:separator:Подготавливать ADR, схемы и спецификации
Разрабатывать прототипы ПО:separator:Быстро реализовывать proof‑of‑concept для проверки гипотез
Исследовать новые ИКТ‑технологии:separator:Оценивать применимость новых языков, фреймворков и сервисов
Выполнять R&D в ИТ:separator:Проводить эксперименты и внедрять инновации в продукт
Разрабатывать ML‑алгоритмы:separator:Проектировать модели, писать экспериментальный код, оценивать метрики
Проводить технический поиск:separator:Находить решения и патенты для оценки новизны
Публиковать результаты исследований:separator:Подготавливать статьи/white‑papers и выступать на конференциях
Управлять R&D‑портфелем:separator:Балансировать краткосрочные и долгосрочные инициативы
Коммерциализировать ИС:separator:Переводить R&D‑наработки в продукт, лицензирование или spin‑off
Писать серверный код:separator:Создавать поддерживаемый и тестируемый back‑end‑код на выбранном языке
Проектировать и реализовывать API:separator:Создавать энд‑пойнты, документацию и управлять версиями
Работать с базами данных:separator:Моделировать схемы и оптимизировать запросы в SQL/NoSQL‑СУБД
Разрабатывать микросервисы:separator:Декомпозировать монолит, настраивать коммуникацию и оркестрацию
Оптимизировать производительность приложений:separator:Устранять узкие места CPU, памяти и I/O
Обеспечивать безопасность приложений:separator:Реализовывать контроль доступа, шифрование данных и OWASP‑защиту
Использовать контейнеризацию:separator:Паковать сервисы в Docker и деплоить через оркестратор
Настраивать CI/CD:separator:Автоматизировать сборку, тесты и кат‑овер версий
Мониторить и логировать сервисы:separator:Настраивать метрики, алёрты и централизованные логи
Проектировать облачную архитектуру:separator:Определять компоненты и autoscaling в облаке
Применять IaC:separator:Описывать окружения через Terraform/Ansible
Проектировать событийную архитектуру:separator:Использовать очереди/шины сообщений для loose coupling сервисов
Писать клиентский код:separator:Создавать интерактивные веб‑интерфейсы на JavaScript/TypeScript
Разрабатывать SPA‑приложения:separator:Реализовывать одностраничные приложения на современных JS‑фреймворках
Верстать на HTML/CSS:separator:Писать семантичную разметку и адаптивные стили
Обеспечивать кросс‑браузерную совместимость:separator:Гарантировать единый UX в основных браузерах
Использовать препроцессоры CSS:separator:Применять Sass/Less для модульного описания стилей
Оптимизировать производительность фронтенда:separator:Уменьшать бандл, применять lazy‑loading, code‑splitting
Тестировать фронтенд:separator:Разрабатывать unit‑, snapshot‑ и e2e‑тесты
Управлять состоянием приложения:separator:Реализовывать глобальное состояние (Redux, MobX, Context)
Разрабатывать PWA:separator:Использовать Service Worker, offline‑cache и web manifest
Применять UX/UI принципы:separator:Строить интерфейсы с учётом доступности и юзабилити
Разрабатывать дизайн‑системы:separator:Создавать библиотеку UI‑компонентов с гайдлайнами
Создавать микрофронтенд‑архитектуру:separator:Декомпозировать UI на независимые модули
Оптимизировать критический путь рендеринга:separator:Минимизировать TTFB, FCP, LCP за счёт preload и split‑chunks 